// 在正则中有一些字符是特殊字符，它本身有特别的含义，比如 \d 表示数字。
// 除了特殊含义的字符，其他的都是字面量（写什么就是什么）,

// 例子1：检测字符串内是否包含【4个连续的数字】
/\d\d\d\d/.test('d111s1234'); // 结果为 true，匹配到最后的 1234

// 例子2：检测字符串内是否包含 【1234】
/1234/.test('d111s1234'); // 结果为 true，匹配到最后的 1234

// 问题: 写出一个正则, 匹配字符中是否包含 【admin 后面跟跟随 4 个数字，并且这4个数字是以 1 开始】
const checkStr1 = '1asadmin1003s';

// 预期结果
正则.test(checkStr1) === true;
/admin1\d{3}/.test('1asadmin1003s');


// ---------------------------------

// 正则中的另一个特殊字符是 [], 中括号成对出现。
// 中括号内容可以放任意数量的值，这些任意的字符是 或 的关系，
// 中括号内不管有多少个字符，中括号本身只表示一个字符

// 例子1：检测字符串内是否包含【1开始或者3开始的4个连续的数字】
/[13]\d\d\d/.test('s12344') // 返回true
/[13]\d\d\d/.test('s3234') // 返回true

// 问题: 写出一个正则, 匹配字符中是否包含 【admin 后面跟跟随 4 个数字，并且这4个数字是以 1 或者 3 开始】
const checkStr2 = '1asadmin1003s';
const checkStr3 = '1asadmin3003s';

// 预期结果
正则.test(checkStr2) === true;
正则.test(checkStr3) === true;
/admin[13]\d{3}/.test('1asadmin1003s') === true;
/admin[13]\d{3}/.test('1asadmin3003s') === true;

// ---------------------------------

// 前面写的 4 个数字使用 4个 \d 表示的，其实正则中有专门表示数量的特殊字符，就是 {数字1,数字2}。大括号也是成对出现的，大括号内有两个数字，表示一个区间。数字1表示最小是几个， 数字2表示最大是几个。数字1和数字2用逗号分割，中间不能有空格，比如 {1, 3} 这样是不允许的，必须是 {1,3}

// 例子1：检测字符串内是否包含【1 到 4 个连续的 a】
/a{1,4}/.test('a') // 返回true
/a{1,4}/.test('aaa') // 返回true
/a{1,4}/.test('aaaa') // 返回true

// 如果我们直接想限制 4 位，而不是一个区间，可以写成 {4,4} 。表示最小是 4 位，最大也是 4位

// 例子2： 检测字符串内是否包含【4 个连续的 a】
/a{4,4}/.test('aaaa') // 返回true

// 当最小值 和 最大值一样时，正则也提供了简写 {4,4} 也可以写成 {4}
/a{4}/.test('aaaa') // 返回true

// 问题：写出一个手机号正则检测。【以 130、 131 或者 151 开头的手机号，手机号必须是 43、23 或者 21 结尾】。
const checkStr4 = '13011111143';
const checkStr5 = '13111111123';
const checkStr6 = '15111111121';
const checkStr7 = '13011111121';
const checkStr8 = '13111111143';
const checkStr9 = '15111111123';

// 预期结果
正则.test(checkStr4) === true;
正则.test(checkStr5) === true;
正则.test(checkStr6) === true;
正则.test(checkStr7) === true;
正则.test(checkStr8) === true;
正则.test(checkStr9) === true;

/1[35][01]\d{6}[42][31]/.test('13011111143');